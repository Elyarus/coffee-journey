{"version":3,"sources":["script.js"],"names":["carrito","JSON","parse","localStorage","getItem","productosContainer","document","querySelector","contadorCarrito","createElement","reduce","marginLeft","cantidad","textContent","actualizarContador","totalProductos","concat","id","style","fontWeight","appendChild","carritoSection","producto","carritoProductosDiv","getElementById","botonVaciar","length","innerHTML","carritoTotalP","index","productoDiv","classList","add","border","forEach","padding","alignItems","price","toFixed","inputCantidad","value","nuevaCantidad","parseInt","e","target","botonEliminar","splice","addEventListener","total","mostrarCarrito","acc","guardarActualizar","setItem","stringify","cargarProductos","respuesta","productos","regeneratorRuntime","async","_context","prev","next","awrap","fetch","sent","json","card","boton","title","agregarAlCarrito","t0","stop","productoEnCarrito","find","p","push","_objectSpread","formulario","event","alert","nombre","email","trim","mensaje","errores","test","join","submit"],"mappings":"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","file":"script.min.js","sourcesContent":["// Declaramos carrito y lo cargamos desde localStorage o creamos uno vacío\r\nlet carrito = JSON.parse(localStorage.getItem(\"carrito\")) || [];\r\n\r\n// Contenedor donde se van a renderizar los productos\r\nconst productosContainer = document.querySelector(\".productos-container\");\r\n\r\n// Contador del carrito (podés agregar un span en tu header para mostrarlo)\r\nconst contadorCarrito = document.createElement(\"span\");\r\ncontadorCarrito.id = \"contador-carrito\";\r\ncontadorCarrito.style.marginLeft = \"10px\";\r\ncontadorCarrito.style.fontWeight = \"bold\";\r\ndocument.querySelector(\"nav ul\").appendChild(contadorCarrito);\r\n\r\nfunction actualizarContador() {\r\n  const totalProductos = carrito.reduce(\r\n    (acc, producto) => acc + producto.cantidad,\r\n    0\r\n  );\r\n  contadorCarrito.textContent =\r\n    totalProductos > 0 ? `Carrito: ${totalProductos}` : \"\";\r\n}\r\nconst carritoSection = document.getElementById(\"carrito\");\r\nconst carritoProductosDiv = document.getElementById(\"carrito-productos\");\r\nconst carritoTotalP = document.getElementById(\"carrito-total\");\r\nconst botonVaciar = document.getElementById(\"vaciar-carrito\");\r\n\r\n// Función para mostrar el carrito\r\nfunction mostrarCarrito() {\r\n  carritoProductosDiv.innerHTML = \"\";\r\n\r\n  if (carrito.length === 0) {\r\n    carritoProductosDiv.innerHTML = \"<p>El carrito está vacío.</p>\";\r\n    carritoTotalP.textContent = \"\";\r\n    return;\r\n  }\r\n\r\n  carrito.forEach((producto, index) => {\r\n    const productoDiv = document.createElement(\"div\");\r\n    productoDiv.classList.add(\"producto-carrito\");\r\n    productoDiv.style.border = \"1px solid #b67b5b\";\r\n    productoDiv.style.padding = \"10px\";\r\n    productoDiv.style.marginBottom = \"10px\";\r\n    productoDiv.style.display = \"flex\";\r\n    productoDiv.style.justifyContent = \"space-between\";\r\n    productoDiv.style.alignItems = \"center\";\r\n\r\n    productoDiv.innerHTML = `\r\n      <div>\r\n        <strong>${producto.title}</strong><br/>\r\n        Precio unitario: $${producto.price.toFixed(2)}<br/>\r\n        Cantidad: <input type=\"number\" min=\"1\" value=\"${\r\n          producto.cantidad\r\n        }\" style=\"width: 50px;\" />\r\n      </div>\r\n      <button>Eliminar</button>\r\n    `;\r\n\r\n    // Cambiar cantidad\r\n    const inputCantidad = productoDiv.querySelector(\"input\");\r\n    inputCantidad.addEventListener(\"change\", (e) => {\r\n      const nuevaCantidad = parseInt(e.target.value);\r\n      if (nuevaCantidad >= 1) {\r\n        carrito[index].cantidad = nuevaCantidad;\r\n        guardarActualizar();\r\n      } else {\r\n        e.target.value = carrito[index].cantidad;\r\n      }\r\n    });\r\n\r\n    // Botón eliminar\r\n    const botonEliminar = productoDiv.querySelector(\"button\");\r\n    botonEliminar.addEventListener(\"click\", () => {\r\n      carrito.splice(index, 1);\r\n      guardarActualizar();\r\n      mostrarCarrito();\r\n      actualizarContador();\r\n    });\r\n\r\n    carritoProductosDiv.appendChild(productoDiv);\r\n  });\r\n\r\n  // Mostrar total\r\n  const total = carrito.reduce(\r\n    (acc, producto) => acc + producto.price * producto.cantidad,\r\n    0\r\n  );\r\n  carritoTotalP.textContent = `Total: $${total.toFixed(2)}`;\r\n}\r\n\r\n// Función para guardar carrito en localStorage y actualizar contador\r\nfunction guardarActualizar() {\r\n  localStorage.setItem(\"carrito\", JSON.stringify(carrito));\r\n  actualizarContador();\r\n  mostrarCarrito();\r\n}\r\n\r\n// Vaciar carrito\r\nbotonVaciar.addEventListener(\"click\", () => {\r\n  carrito = [];\r\n  guardarActualizar();\r\n});\r\n\r\n// Mostrar carrito al cargar la página\r\nmostrarCarrito();\r\n\r\n// Función para renderizar productos desde la API\r\nasync function cargarProductos() {\r\n  try {\r\n    const respuesta = await fetch(\"cafes.json\");\r\n    const productos = await respuesta.json();\r\n\r\n    productosContainer.innerHTML = \"\"; // Limpiar container antes de agregar\r\n\r\n    productos.forEach((producto) => {\r\n      const card = document.createElement(\"div\");\r\n      card.classList.add(\"producto\");\r\n\r\n      card.innerHTML = `\r\n        <img src=\"${producto.image}\" alt=\"${producto.title}\" />\r\n        <h3>${producto.title}</h3>\r\n        <p>Precio: $${producto.price}</p>\r\n        <button>Agregar al carrito</button>\r\n      `;\r\n\r\n      // Agregar evento click al botón para agregar al carrito\r\n      const boton = card.querySelector(\"button\");\r\n      boton.addEventListener(\"click\", () => agregarAlCarrito(producto));\r\n\r\n      productosContainer.appendChild(card);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al cargar productos:\", error);\r\n    productosContainer.innerHTML =\r\n      \"<p>No se pudieron cargar los productos.</p>\";\r\n  }\r\n}\r\n\r\n// Función para agregar producto al carrito\r\nfunction agregarAlCarrito(producto) {\r\n  const productoEnCarrito = carrito.find((p) => p.id === producto.id);\r\n\r\n  if (productoEnCarrito) {\r\n    productoEnCarrito.cantidad++;\r\n  } else {\r\n    carrito.push({ ...producto, cantidad: 1 });\r\n  }\r\n\r\n  localStorage.setItem(\"carrito\", JSON.stringify(carrito));\r\n  actualizarContador();\r\n  mostrarCarrito();\r\n  alert(`Agregaste \"${producto.title}\" al carrito.`);\r\n}\r\n// Seleccionamos el formulario\r\nconst formulario = document.querySelector(\".formulario-contacto\");\r\n\r\nformulario.addEventListener(\"submit\", function (event) {\r\n  event.preventDefault(); // Prevenir envío automático para validar\r\n\r\n  const nombre = formulario.nombre.value.trim();\r\n  const email = formulario.email.value.trim();\r\n  const mensaje = formulario.mensaje.value.trim();\r\n\r\n  // Regex simple para validar email\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n  let errores = [];\r\n\r\n  if (nombre === \"\") {\r\n    errores.push(\"El nombre es obligatorio.\");\r\n  }\r\n\r\n  if (email === \"\") {\r\n    errores.push(\"El correo electrónico es obligatorio.\");\r\n  } else if (!emailRegex.test(email)) {\r\n    errores.push(\"El correo electrónico no tiene un formato válido.\");\r\n  }\r\n\r\n  if (mensaje === \"\") {\r\n    errores.push(\"El mensaje es obligatorio.\");\r\n  }\r\n\r\n  if (errores.length > 0) {\r\n    alert(errores.join(\"\\n\"));\r\n    return; // No enviar formulario\r\n  }\r\n\r\n  // Si pasa validación, enviar el formulario con Formspree\r\n  formulario.submit();\r\n});\r\n\r\n// Inicialización\r\ncargarProductos();\r\nactualizarContador();\r\n"]}